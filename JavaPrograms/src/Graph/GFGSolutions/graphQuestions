
public ArrayList<Integer> dfsOfGraph(ArrayList<ArrayList<Integer>> adj) {

        int n = adj.size();
        boolean[] visited = new boolean[n];
        ArrayList<Integer> ans = new ArrayList<>();

        for(int i=0; i<n; i++) {
            if(!visited[i]) {
                dfs(adj,i,visited,ans);
            }
        }
        return ans;
    }
    public void dfs(ArrayList<ArrayList<Integer>> adj, int curr,boolean visited[],ArrayList<Integer> ans) {
        visited[curr] = true;
        ans.add(curr);

        for(int neighbour : adj.get(curr)) {
            if(!visited[neighbour]) {
                dfs(adj,neighbour,visited,ans);
                visited[neighbour] = true;
            }
        }
 }

 //-------------BFS with disconnected components ----------

 //{ Driver Code Starts
 import java.util.*;



 // User function Template for Java
 class Solution {
     public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
         boolean[] visited = new boolean[V];
         ArrayList<Integer> ans = new ArrayList<>();

         for (int i = 0; i < V; i++) {
             if (!visited[i]) {
                 bfs(adj, i, visited, ans);
             }
         }

         return ans;
     }

      public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
             boolean[] visited = new boolean[V];
             ArrayList<Integer> ans = new ArrayList<>();

             for (int i = 0; i < V; i++) {
                 if (!visited[i]) {
                     bfs(adj, i, visited, ans);
                 }
             }

             return ans;
         }


     public void bfs(ArrayList<ArrayList<Integer>> adj, int sv, boolean[] visited, ArrayList<Integer> ans) {
         Queue<Integer> queue = new LinkedList<>();
         queue.offer(sv);
         visited[sv] = true;

         while (!queue.isEmpty()) {
             int curr = queue.poll();
             ans.add(curr);

             for (int neighbour : adj.get(curr)) {
                 if (!visited[neighbour]) {
                     queue.offer(neighbour);
                     visited[neighbour] = true;
                 }
             }
         }
     }
 }